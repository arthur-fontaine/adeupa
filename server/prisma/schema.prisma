// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  name            String
  email           String              @unique
  password        String
  birthdate       DateTime?
  location        Location            @relation(fields: [locationId], references: [id])
  earnedBadges    Badge[]
  itemsUnlocked   Item[]
  scannedCodes    Code[]
  character       Character           @relation(fields: [characterId], references: [id])
  landscape       Landscape           @relation(fields: [landscapeId], references: [id])
  completedQuests CompletedQuest[]
  visitedShop     VisitedShop[]
  likedShops      Shop[]
  searchHistory   UserSearchHistory[]

  locationId  Int
  characterId Int @unique
  landscapeId Int @unique
}

model UserSearchHistory {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  shop       Shop     @relation(fields: [shopId], references: [id])
  searchDate DateTime

  shopId Int
  userId Int
}

model Character {
  id           Int    @id @default(autoincrement())
  enabledItems Item[]

  user User?
}

model Landscape {
  id           Int    @id @default(autoincrement())
  enabledItems Item[]

  user User?
}

model Item {
  id             Int      @id @default(autoincrement())
  type           ItemType
  value          String
  label          String
  requiredBadges Badge[]

  ownedBy              User[]
  associatedCharacters Character[]
  associatedLandscapes Landscape[]
}

enum ItemType {
  CharacterColor
  CharacterClothes
  LandscapeDistrict
}

model CompletedQuest {
  id           Int      @id @default(autoincrement())
  quest        Quest    @relation(fields: [questId], references: [id])
  completeDate DateTime
  user         User     @relation(fields: [userId], references: [id])

  userId  Int
  questId Int
}

model Badge {
  id    String @id @default(uuid())
  name  String
  value Int
  tags  Tag[]

  earnedBy         User[]
  associatedItems  Item[]
  associatedQuests Quest[]
}

model Quest {
  id          Int            @id @default(autoincrement())
  name        String         @default("")
  description String         @default("")
  missions    QuestMission[]
  badge       Badge[]

  associatedCompletedQuests CompletedQuest[]
}

model QuestMission {
  id           Int    @id @default(autoincrement())
  name         String @default("")
  description  String @default("")
  requiredCode Code   @relation(fields: [requiredCodeId], references: [id])

  associatedQuests Quest[]
  requiredCodeId   String
}

model Code {
  id          String @id @default(uuid())
  description String @default("")

  associatedQuestMissions QuestMission[]
  associatedUsers         User[]
  associatedShop          Shop?
}

model ShopSchedule {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  shop      Shop     @relation(fields: [shopId], references: [id])

  shopId Int
}

model Shop {
  id          Int                 @id @default(autoincrement())
  name        String
  description String
  tags        Tag[]
  type        ShopType?
  code        Code                @relation(fields: [codeId], references: [id])
  location    Location            @relation(fields: [locationId], references: [id])
  schedules   ShopSchedule[]
  phoneNumber String
  website     String
  historyOf   UserSearchHistory[]

  likedBy                User[]
  codeId                 String        @unique
  locationId             Int           @unique
  associatedVisitedShops VisitedShop[]

  @@fulltext([name])
}

enum ShopType {
  Flower
  Food
  Toy
  Other
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  associatedBadges Badge[]
  associatedShops  Shop[]
}

model VisitedShop {
  id   Int  @id @default(autoincrement())
  shop Shop @relation(fields: [shopId], references: [id])
  user User @relation(fields: [userId], references: [id])

  userId Int
  shopId Int
}

model Location {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float

  users           User[]
  associatedShops Shop[]
}
